@use "sass:map";
@use "sass:list";

$blue-filter:((#001E8C, #425496, #FFFFFF),
  (1, .53, 0),
  (0%, 60%, 100%));

$fonts:("Helvetica Neue LT Com", sans-serif);
$white:#FFFFFF;


* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

body {
  width: 100vw;
  overflow-x: hidden;
  font-family: $fonts;
}

a {
  text-decoration: none;
}

ul,
li {
  list-style: none;
}



@mixin flexy($direction:'x', $align:center) {
  display: flex;
  flex-wrap: wrap;

  @if $direction=='x' {
    flex-direction: row;
    justify-content: $align;
    align-items: center;
  }

  @else if $direction=='y' {
    flex-direction: column;
    justify-content: center;
    align-items: $align;
  }

  @else {
    @warn "first argument must be either 'x' or 'y'";
  }
}

@mixin img-background($url, $pos:center) {
  background-image: url($url);
  background-position: $pos;
  background-size: cover;
  background-repeat: no-repeat;
}

@mixin square($width) {
  display: block;
  width: $width;
  height: $width;
}

@function hex-to-rgba($hex-color, $opacity) {
  @return rgba($hex-color, $opacity);
}

@mixin apply-gradient($direction:right, $gradient...) {
  $lists: list.nth($gradient, 1);

  $colors: list.nth($lists, 1);
  $opacities: list.nth($lists, 2);
  $breakpoints: list.nth($lists, 3);


  $color-num: list.length($colors);



  $syntax: 'to #{$direction},';


  @for $i from 1 through $color-num {
    $color: list.nth($colors, $i);
    $opacity: list.nth($opacities, $i);
    $breakpoint: list.nth($breakpoints, $i);

    $rgba-color: hex-to-rgba($color, $opacity);

    $syntax: '#{$syntax} #{$rgba-color} #{$breakpoint}';

    @if $i !=$color-num {
      $syntax: '#{$syntax},';
    }

  }

  background:linear-gradient(#{$syntax});
}




/*
Melek
TODO: extract colors from design
example:
  $variableName: hex-value;
*/